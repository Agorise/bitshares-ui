import fc from "eliptic_secp256k1"
/*          secp256k1_context_create FLAGS      */
let SECP256k1_CONTEXT_VERIFY = (1 << 0);
let SECP256k1_CONTEXT_SIGN = (1 << 1);
let SECP256k1_CONTEXT_COMMIT = (1 << 7);
let SECP256k1_CONTEXT_RANGEPROOF = (1 << 8);

class secp256k1_context_t
{
    constructor()
    {
        this.ecmult_gen_ctx = new secp256k1_ecmult_context_t;
        this.ecmult_ctx = new secp256k1_ecmult_gen_context_t;
        this.ecmult_gen2_ctx = new secp256k1_ecmult_gen2_context_t;
        this.ecmult_rangeproof_ctx = new secp256k1_rangeproof_context_t;
    }
}
/* secp256k1_context_create(flags)
 * @flags:  | SECP256k1_CONTEXT_VERIFY
 *          | SECP256k1_CONTEXT_SIGN
 *          | SECP256k1_CONTEXT_COMMIT
 *          | SECP256k1_CONTEXT_RANGEPROOF
 * returns
*/
let secp256k1_context_create = function(flags)
{
    let ret = new secp256k1_context_t;

    ret.ecmult_ctx = secp256k1_ecmult_context_init();
    ret.ecmult_gen_ctx = secp256k1_ecmult_gen_context_init();
    ret.ecmult_gen2_ctx = secp256k1_ecmult_gen2_context_init();
    ret.ecmult_rangeproof_ctx = secp256k1_rangeproof_context_init();

    if(flags & SECP256k1_CONTEXT_SIGN)
    {
        ret.ecmult_gen_ctx = secp256k1_ecmult_gen_context_build();
    }
    if(flags & SECP256k1_CONTEXT_VERIFY)
    {
        ret.ecmult_ctx = secp256k1_ecmult_context_build();
    }
    if(flags & SECP256k1_CONTEXT_COMMIT)
    {
        ret.ecmult_gen2_ctx = secp256k1_ecmult_gen2_context_build();
    }
    if(flags & SECP256K1)
    {
        ret.ecmult_gen2_ctx = secp256k1_ecmult_gen2_context_build();
    }
    return ret;
};     
/* Blind_Commitment(blind_factor, value)
 * @blind_factor: Blinding Factor generated by 
 * @value: Ammount Value for transaction.
*/
let Blind_Commitment = (blind_factor,value) => {
    return result = secp256k1_pedersen_commit(fc.detail._get_context(), blind_factor, value);
}
export default {Blind_Commitment,secp256k1_context_create}